import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class PartitionAndMerge {

    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        int partitionSize = 2;
        int[] partitionOrder = {3, 2, 1};

        List<List<Integer>> partitions = partitionArray(array, partitionSize);
        List<Integer> mergedArray = mergePartitions(partitions, partitionOrder);

        System.out.println("Output:");
        for (int num : mergedArray) {
            System.out.print(num + " ");
        }
    }

    // Function to partition the array
    private static List<List<Integer>> partitionArray(int[] array, int partitionSize) {
        List<List<Integer>> partitions = new ArrayList<>();
        for (int i = 0; i < array.length; i += partitionSize) {
            int end = Math.min(i + partitionSize, array.length);
            partitions.add(Arrays.asList(Arrays.copyOfRange(array, i, end)));
        }
        return partitions;
    }

    // Function to merge partitions based on the specified order
    private static List<Integer> mergePartitions(List<List<Integer>> partitions, int[] partitionOrder) {
        List<Integer> mergedArray = new ArrayList<>();
        for (int order : partitionOrder) {
            for (List<Integer> partition : partitions) {
                if (partitionOrder[partitions.indexOf(partition)] == order) {
                    mergedArray.addAll(partition);
                    break;
                }
            }
        }
        return mergedArray;
    }
}
